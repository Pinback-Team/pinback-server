name: CI/CD Pipeline
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/libs/*.jar
  
  docker-build-and-push:
    needs: build
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/pinback:latest

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SSH_HOST }}
          username: ${{ secrets.EC2_SSH_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1) Docker Hub에서 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/pinback:latest
            
            # 2) 기존 컨테이너 중지 및 삭제
            docker stop pinback-server-container || true
            docker rm pinback-server-container || true
            
            # 3) 새로운 컨테이너 실행
            docker run -d \
              --name pinback-server-container \
              -p 8080:8080 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_DRIVER="${{ secrets.DB_DRIVER }}" \
              -e DDL_AUTO="validate" \
              -e SHOW_SQL="false" \
              ${{ secrets.DOCKER_USERNAME }}/pinback:latest
            
            # 4) 필요 시 사용 안 하는 이미지 정리
            docker image prune -f

