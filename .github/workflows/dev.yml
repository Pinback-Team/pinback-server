name: CI/CD Pipeline
on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

env:
  DOCKER_IMAGE_NAME: pinback

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ '21' ]
      fail-fast: false
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    permissions:
      contents: read
      checks: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build --no-daemon --build-cache --parallel --max-workers=4

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: api/build/libs/*.jar

  docker-build-and-push:
    needs: build
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: api/build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Image Tag
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "TAG=dev" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "TAG=prod" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:prod" >> $GITHUB_ENV
          fi

      - name: Docker Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push'
    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 환경에 따라 SSH 연결 정보 및 경로 설정
      - name: Set Deploy Environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "HOST=${{ secrets.DEV_EC2_SSH_HOST }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.DEV_EC2_SSH_USERNAME }}" >> $GITHUB_ENV
            echo "KEY=${{ secrets.DEV_EC2_SSH_KEY }}" >> $GITHUB_ENV
            echo "DEPLOY_DIR=/home/ubuntu/pinback-dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "HOST=${{ secrets.EC2_SSH_HOST }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.EC2_SSH_USERNAME }}" >> $GITHUB_ENV
            echo "KEY=${{ secrets.EC2_SSH_KEY }}" >> $GITHUB_ENV
            echo "DEPLOY_DIR=/home/ubuntu/pinback" >> $GITHUB_ENV
          fi

      # 3. docker-compose.yml 파일을 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.KEY }}
          source: "docker-compose.yml"
          target: "${{ env.DEPLOY_DIR }}"

      # 4. 배포 (docker composee(v2))
      - name: Deploy with Docker Compose to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.KEY }}
          script: |
            # 1) 배포 디렉터리로 이동
            mkdir -p "${{ env.DEPLOY_DIR }}" # 디렉토리가 없으면 생성 (최초 배포 시)
            cd "${{ env.DEPLOY_DIR }}"
            
            # 2) EC2에 미리 만들어둔 pinback.env 파일의 환경 변수 로드
            if [ ! -f "${{ env.DEPLOY_DIR }}/pinback.env" ]; then
                echo "ERROR: .env file not found at ${{ env.DEPLOY_DIR }}/pinback.env"
                exit 1
            fi
            export $(cat "${{ env.DEPLOY_DIR }}/pinback.env" | xargs)
            
            # 3) 기존 Docker Compose 스택 중지 및 삭제 (있다면)
             docker compose -f "${{ env.DEPLOY_DIR }}/docker-compose.yml" down || true
            
            # Docker Hub에서 최신 이미지 pull
            docker compose -f "${{ env.DEPLOY_DIR }}/docker-compose.yml" pull
            
            # 5) Docker Compose로 서비스 시작
            docker compose -f "${{ env.DEPLOY_DIR }}/docker-compose.yml" up -d --remove-orphans
            
            # 6) 사용하지 않는 Docker 이미지 정리
            docker image prune -f
