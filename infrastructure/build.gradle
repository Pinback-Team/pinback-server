plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.pinback'
version = '0.0.1-SNAPSHOT'

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.2"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // shared 모듈 의존성
    implementation project(':shared')
    // domain 모듈 의존성
    implementation project(':domain')

    // Spring Boot 웹 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    // JPA 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL 의존성
    implementation 'io.github.openfeign.querydsl:querydsl-core:6.11'
    implementation 'io.github.openfeign.querydsl:querydsl-jpa:6.11'
    annotationProcessor 'io.github.openfeign.querydsl:querydsl-apt:6.11:jpa'

    // Spring Security 의존성
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Redis 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Firebase Admin SDK
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // Swagger/OpenAPI 의존성
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // JWT 의존성
    implementation 'com.auth0:java-jwt:4.4.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def generated = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += generated
}

configurations {
    querydsOnly
}

dependencies {
    querydsOnly project(':domain')
}

tasks.register('generateQuerydsl', JavaCompile) {
    source = project(':domain').sourceSets.main.allJava
    classpath = configurations.querydsOnly + configurations.annotationProcessor
    options.annotationProcessorPath = configurations.annotationProcessor
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
    destinationDirectory = file("$buildDir/tmp/querydsl")
    dependsOn project(':domain').classes
}

tasks.withType(JavaCompile).configureEach {
    if (name != 'generateQuerydsl') {
        dependsOn generateQuerydsl
        inputs.files(fileTree(dir: 'src', include: '**/*.java'))
        outputs.cacheIf { true }
        options.annotationProcessorGeneratedSourcesDirectory = generated
    }
}

clean {
    delete generated
}

tasks.named('test') {
    useJUnitPlatform()
}
